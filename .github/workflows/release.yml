name: Release

on:
  workflow_dispatch:
    inputs:
      level:
        description: 'Release level (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch

env:
  BINARY_NAME: templatize
  BINARY_HOMEPAGE: "https://github.com/${{ github.repository }}"
  BINARY_DESCRIPTION: "A powerful CLI tool for converting existing projects into reusable Jinja2 templates"
  DOWNLOAD_PREFIX: "https://github.com/${{ github.repository }}/releases/download"
  DESTINATION_HOMEBREW_TAP: ${{ github.repository_owner }}/homebrew-tap
  REPOSITORY_DISPATCH_TOKEN: ${{ secrets.REPOSITORY_DISPATCH_TOKEN }}

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-workspaces
        run: cargo install cargo-workspaces

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Release
        run: cargo ws version --no-git-commit ${{ github.event.inputs.level }}

      - name: Get version
        id: get-version
        run: |
          VERSION=$(cargo metadata --format-version 1 | jq -r '.workspace_members[0]' | xargs cargo metadata --format-version 1 | jq -r '.packages[] | select(.name == "templatize-bin") | .version')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Commit and tag
        run: |
          git add .
          git commit -m "Release ${{ steps.get-version.outputs.version }} [skip ci]"
          git tag v${{ steps.get-version.outputs.version }}
          git push origin main
          git push origin v${{ steps.get-version.outputs.version }}

  build-binaries:
    needs: prepare-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
            platform: linux
            arch: x86_64
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            platform: linux
            arch: aarch64
          - os: macos-13
            target: x86_64-apple-darwin
            platform: macos
            arch: x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            platform: macos
            arch: aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            platform: windows
            arch: x86_64

    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.prepare-release.outputs.version }}

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup cross-compilation (Linux ARM64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
          echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }} --bin templatize

      - name: Prepare binary (Unix)
        if: matrix.platform != 'windows'
        run: |
          mkdir -p dist
          cp target/${{ matrix.target }}/release/templatize dist/
          chmod +x dist/templatize

      - name: Prepare binary (Windows)
        if: matrix.platform == 'windows'
        run: |
          mkdir dist
          copy target\${{ matrix.target }}\release\templatize.exe dist\

      - name: Create archive (Unix)
        if: matrix.platform != 'windows'
        run: |
          cd dist
          tar -czf ../${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz .
          cd ..
          shasum -a 256 ${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz > ${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.tar.gz.sha256

      - name: Create archive (Windows)
        if: matrix.platform == 'windows'
        run: |
          cd dist
          7z a ..\${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.zip *
          cd ..
          certutil -hashfile ${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.zip SHA256 > ${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.zip.sha256

      - name: Create Windows Installer
        if: matrix.platform == 'windows'
        run: |
          # Install Inno Setup
          choco install innosetup
          # Build installer
          iscc /DAppVersion=${{ needs.prepare-release.outputs.version }} pkg/windows/Templatize.iss
          # Generate checksum for installer
          certutil -hashfile target/installer/${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}-installer.exe SHA256 > target/installer/${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}-installer.exe.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            ${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}.*
            target/installer/${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-${{ matrix.platform }}-${{ matrix.arch }}-installer.*

  create-release:
    needs: [prepare-release, build-binaries]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: v${{ needs.prepare-release.outputs.version }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -type f -exec cp {} release-assets/ \;
          ls -la release-assets/

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          release_name: Release v${{ needs.prepare-release.outputs.version }}
          body: |
            ## Changes
            
            Release v${{ needs.prepare-release.outputs.version }}
            
            ## Downloads
            
            ### Linux
            - [x86_64](${{ env.DOWNLOAD_PREFIX }}/v${{ needs.prepare-release.outputs.version }}/${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-linux-x86_64.tar.gz)
            - [aarch64](${{ env.DOWNLOAD_PREFIX }}/v${{ needs.prepare-release.outputs.version }}/${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-linux-aarch64.tar.gz)
            
            ### macOS
            - [x86_64](${{ env.DOWNLOAD_PREFIX }}/v${{ needs.prepare-release.outputs.version }}/${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-macos-x86_64.tar.gz)
            - [aarch64](${{ env.DOWNLOAD_PREFIX }}/v${{ needs.prepare-release.outputs.version }}/${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-macos-aarch64.tar.gz)
            
            ### Windows
            - [x86_64 Archive](${{ env.DOWNLOAD_PREFIX }}/v${{ needs.prepare-release.outputs.version }}/${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-windows-x86_64.zip)
            - [x86_64 Installer](${{ env.DOWNLOAD_PREFIX }}/v${{ needs.prepare-release.outputs.version }}/${{ env.BINARY_NAME }}-${{ needs.prepare-release.outputs.version }}-windows-x86_64-installer.exe)
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for file in release-assets/*; do
            echo "Uploading $file"
            curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Content-Type: application/octet-stream" \
                 --data-binary @"$file" \
                 "${{ steps.create_release.outputs.upload_url }}=$(basename "$file")"
          done

  update-homebrew:
    needs: [prepare-release, create-release]
    runs-on: ubuntu-latest
    if: env.REPOSITORY_DISPATCH_TOKEN != ''
    steps:
      - name: Repository Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ env.REPOSITORY_DISPATCH_TOKEN }}
          repository: ${{ env.DESTINATION_HOMEBREW_TAP }}
          event-type: update-formula
          client-payload: |
            {
              "binary": "${{ env.BINARY_NAME }}",
              "version": "${{ needs.prepare-release.outputs.version }}",
              "homepage": "${{ env.BINARY_HOMEPAGE }}",
              "description": "${{ env.BINARY_DESCRIPTION }}",
              "download_prefix": "${{ env.DOWNLOAD_PREFIX }}"
            }